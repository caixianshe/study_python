# 序列
# 序列是指:内容连续、有序，可使用下标索引的一类数据容器
# 列表、元组、字符串，均可以可以视为序列。

# 序列中出现切片  就是在一个序列中取出一个子序列
# 语法 序列[起始下标:结束下标:步长]  包头不包尾
# 起始下标表示从何处开始，可以留空，留空视作从头开始
# 结束下标(不含)表示何处结束，可以留空，留空视作截取到结尾
# 步长为1 表示一个一个取 步长为2 表示每次跳过一个取

my_list = [0, 1, 2, 3, 4, 5, 6]
# 对list进行切片 从1开始到4结束 步长为1
# result1 = my_list[1, 4] # 注意中间不是，而是： 包头不包尾
result1 = my_list[1:4]
print(f"结果1为{result1}")

# 对tuple进行切片 从头开始 到最后结束 步长为1
my_tuple = (0, 1, 2, 3, 4, 5, 6)
result2 = my_tuple[:]
print(f"结果2为{result2}")

# 对字符串进行切片 从头开始 到最后结束 步长为2
my_str = "01234567"
result3 = my_str[::2]
print(f"结果3为{result3}")

# 对字符串进行切片 从头开始 到最后结束 步长为-1
my_str = "01234567"
result4 = my_str[::-1]
print(f"结果4为{result4}")

# 对list进行切片 从3开始到1结束 步长为-1
my_list = [0, 1, 2, 3, 4, 5, 6]
result5 = my_str[3:1:-1]
print(f"结果5为{result5}")

# 对tuple进行切片 从头开始 到最后结束 步长为-2
my_tuple = (0, 1, 2, 3, 4, 5, 6)
result6 = my_tuple[::-2]
print(f"结果6为{result6}")


# 课后拓展练习
# 对上方的进行倒叙 取出(5, 4, 3, 2, 1)
result7 = my_tuple[::-1][1:6]
print(result7)
